// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G'];
  return dnaBases[Math.floor(Math.random() * 4)];
};

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = [];
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase());
  }
  return newStrand;
};

// use a factory function to create  P. aequor DNA
const pAequorFactory = (number, DNABases) => {
  return {
    specimenNum: number,
    dna: DNABases,
    strandSurvive: [],
    mutate() {
      // Select random base in DNA
      console.log('This is an original dna: ' + this.dna)
      let i = Math.floor(Math.random() * this.dna.length);
      console.log('This is a random index in the base array: ' + i);
      // Create a variable for old base
      let oldBase = this.dna[i];
      console.log('This is a base that will be replace: ' + oldBase);
      // Generate a random Base by calling returnRandBase() function
      let generateBases = returnRandBase();
      console.log('This is a new base that be generated by returnRandBase function: ' + generateBases)
      if (oldBase = generateBases){
        this.dna.splice(i, 1, generateBases);
      }
      return this.dna;
    },
    compareDNA(anotherDNA){
      // create a variable for a current DNA array
      let currentDNA = this.dna;
      console.log('Current DNA: ' + currentDNA);
      // create a variable for another DNA array
      let compareDNA = anotherDNA;
      console.log('Another DNA: ' + compareDNA)
      
      let count = 0;
      for (let x = 0; x < currentDNA.length; x++){
        //console.log(x)
        for (let y = 0; y < compareDNA.length; y++){
          if (x === y && currentDNA[x] === compareDNA[y]){
            count += 1;
          }
        }
      }
      console.log('Number of count:' + count)
      let percentCalculate = count/15 * 100
      //console.log(percentCalculate)
      console.log(`specimen #1 and specimen #2 have ${percentCalculate.toFixed(2)}% DNA in common.`)
      
    },
    willLikelySurvive(){
      // create a variable for current DNA
      let currentDNA = this.dna;
      console.log('This is a DNA: ' + currentDNA)

      // Count the C and G bases
      let count = 0
      for (let x = 0; x < currentDNA.length; x++){
        if (currentDNA[x] === 'C' || currentDNA[x] === 'G'){
          count += 1
        }
      }
      console.log('Number of count:' + count)
      // calculating the percent
      let percentCalculate = count/15 * 100
      console.log('Number of percent that contains C and G: ' + percentCalculate.toFixed(2))

      // return true or false
      if (percentCalculate > 60){
        return true;
      } else {
        return false;
      }
    },
    surviveStrand(){
      //let surviveArray = [];
      if (this.willLikelySurvive() === true && this.strandSurvive.length < 30){
        this.strandSurvive.push(this.dna)
      }
      return console.log('30 instances of pAequor that can survive in their natural environment: ' + this.strandSurvive)
    }
  }
};

let ex1 = pAequorFactory(1, mockUpStrand());
let ex2 = pAequorFactory(2, mockUpStrand());

//ex1.compareDNA(ex2.dna)
//console.log(ex2)
//ex1.willLikelySurvive();
ex1.surviveStrand()
console.log(ex1.strandSurvive)
//console.log(ex1.willLikelySurvive())


